*******************************
	7=base_geometry.py
*******************************
import module:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

Test for valid:
>>> bg.integer_validator("my_int", 9)

Test for string (invalid):
>>> bg.integer_validator("distance", "10")
Traceback (most recent call last):
...
TypeError: distance must be an integer

Test for negative integer(invalid):
>>> bg.integer_validator("distance", -5)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

Test for zero value:
>>> bg.integer_validator("distance", 0)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

Test for tuple:
>>> bg.integer_validator("xoxo", (4, 3))
Traceback (most recent call last):
...
TypeError: xoxo must be an integer

Test for dictionary list:
>>> bg.integer_validator("xoxo", {4, 3})
Traceback (most recent call last):
...
TypeError: xoxo must be an integer

Test 0 argument:
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test flot:
>>> bg.integer_validator("xoxo", 4.5)
Traceback (most recent call last):
...
TypeError: xoxo must be an integer
